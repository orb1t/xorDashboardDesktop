package tst;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.*;

public class repeatingControl extends JDialog {
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;

	private JPanel repeaterPanel;
	private JSpinner spnrRepeaterFreq;
	private JComboBox cbRepeaterMode;
	private JCheckBox chkRepeaterEnabled;
	private JLabel lbCommand;
	private JPanel commandPanel;

	public repeatingControl () {
		$$$setupUI$$$();
		setContentPane( contentPane );
		setModal( true );
		getRootPane().setDefaultButton( buttonOK );


		SpinnerNumberModel mdl = new SpinnerNumberModel( 10, 0, 100, 1 );
		spnrRepeaterFreq.setModel( mdl );


		buttonOK.addActionListener( new ActionListener() {
			public void actionPerformed ( ActionEvent e ) {
				onOK();
			}
		} );

		buttonCancel.addActionListener( new ActionListener() {
			public void actionPerformed ( ActionEvent e ) {
				onCancel();
			}
		} );

// call onCancel() when cross is clicked
		setDefaultCloseOperation( DO_NOTHING_ON_CLOSE );
		addWindowListener( new WindowAdapter() {
			public void windowClosing ( WindowEvent e ) {
				onCancel();
			}
		} );

// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction( new ActionListener() {
			public void actionPerformed ( ActionEvent e ) {
				onCancel();
			}
		}, KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0 ), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT );


		spnrRepeaterFreq.addChangeListener( new ChangeListener() {
			@Override
			public void stateChanged ( ChangeEvent changeEvent ) {
				JSpinner source = (JSpinner) changeEvent.getSource();
				int value = (int) source.getValue();
				lbCommand.setText( "Command : " + value + " " + cbRepeaterMode.getSelectedItem().toString() );
//				if ( ( controlProperties.getProperties().size() > 0 ) && ( controlProperties.getPropertyValue("Command") != "0" ) ) {
//					System.out.println( "ChangeEvent = [ " + controlProperties.getPropertyValue("Command").replace( "$VAL", String.valueOf( value ) ) + "\n" + e );
//					// TODO: write this.controlProperties.getPropertyValue("Command").replace( "$VAL", String.valueOf( value ) ) to Serial!
//				}
			}
		} );

		chkRepeaterEnabled.addItemListener( new ItemListener() {
			@Override
			public void itemStateChanged ( ItemEvent itemEvent ) {
				System.out.println( "itemEvent = [" + ( (JCheckBox) itemEvent.getItemSelectable() ).isSelected() + "]" );
			}
		} );
	}


	private void createUIComponents () {
		// TODO: place custom component creation code here
//		slider1 = new JSlider();

	}


	private void onOK () {
// add your code here
		dispose();
	}

	private void onCancel () {
// add your code here if necessary
		dispose();
	}

	public static void main ( String[] args ) {
		repeatingControl dialog = new repeatingControl();
		dialog.pack();
		dialog.setVisible( true );
		System.exit( 0 );
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$ () {
		contentPane = new JPanel();
		contentPane.setLayout( new GridLayoutManager( 2, 1, new Insets( 10, 10, 10, 10 ), -1, -1 ) );
		final JPanel panel1 = new JPanel();
		panel1.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
		contentPane.add( panel1, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false ) );
		final Spacer spacer1 = new Spacer();
		panel1.add( spacer1, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false ) );
		final JPanel panel2 = new JPanel();
		panel2.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1, true, false ) );
		panel1.add( panel2, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
		buttonOK = new JButton();
		buttonOK.setText( "OK" );
		panel2.add( buttonOK, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
		buttonCancel = new JButton();
		buttonCancel.setText( "Cancel" );
		panel2.add( buttonCancel, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
		repeaterPanel = new JPanel();
		repeaterPanel.setLayout( new GridLayoutManager( 3, 3, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
		contentPane.add( repeaterPanel, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false ) );
		repeaterPanel.setBorder( BorderFactory.createTitledBorder( "repeaterPanel" ) );
		spnrRepeaterFreq = new JSpinner();
		repeaterPanel.add( spnrRepeaterFreq, new GridConstraints( 0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension( 128, -1 ), new Dimension( 128, -1 ), null, 0, false ) );
		cbRepeaterMode = new JComboBox();
		final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
		defaultComboBoxModel1.addElement( "Hz" );
		defaultComboBoxModel1.addElement( "kHz" );
		defaultComboBoxModel1.addElement( "times per Second" );
		defaultComboBoxModel1.addElement( "times per Minute" );
		defaultComboBoxModel1.addElement( "times per Hour" );
		cbRepeaterMode.setModel( defaultComboBoxModel1 );
		cbRepeaterMode.setSelectedIndex( 1 );
		repeaterPanel.add( cbRepeaterMode, new GridConstraints( 0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false ) );
		chkRepeaterEnabled = new JCheckBox();
		chkRepeaterEnabled.setText( "Enabled" );
		repeaterPanel.add( chkRepeaterEnabled, new GridConstraints( 1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
		commandPanel = new JPanel();
		commandPanel.setLayout( new GridLayoutManager( 1, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
		repeaterPanel.add( commandPanel, new GridConstraints( 2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
		lbCommand = new JLabel();
		lbCommand.setText( "Command :" );
		commandPanel.add( lbCommand, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$ () {
		return contentPane;
	}
}
